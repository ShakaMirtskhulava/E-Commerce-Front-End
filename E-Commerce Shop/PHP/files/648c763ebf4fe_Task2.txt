II. (6 point) The file.py file contains python code that creates the corresponding file (data.in) for the current task. In particular, a file with 1000 words will be generated. The length of each word varies in the range [3, 15].

Write a program in which the main process creates three child processes (p1, p2, p3). Child processes must process data from the file. In particular, (1) it is necessary to calculate the number of words of the same length; and (2) displaying relevant information (for example, words of length 10 were repeated 300 times). If words of different length have been repeated the same maximum number of times, it is necessary to display information about each length.

To write this program, you must meet the following requirements:

1. Create one FIFO channel and two shared memories in the program and use them as follows:

1.1. The first shared memory must be used between all processes (parent and child). The first time this shared memory must be initialized by a parent with a random number that identifies the child process (in particular, 1 means p1, 2 - p2, 3 - p3). A child process with the appropriate number will start running. This shared memory is a critical section for child processes, and to avoid problems with the critical section, you must use an algorithm named "strictly ordered." In this algorithm, processes can enter their critical section in a strictly ordered sequence (p1, p2, p3, p1, etc.). For example, if the value generated by the parent process is 2, then the child process (p2) must change the value of the first shared memory to 3 (which means that the current process allows the next process to be executed), and accordingly, the child process p3 must allow the next process (p1) to be executed.

1.2. The FIFO channel is used to exchange data between p1 and p2. In particular, the p1 process must create a FIFO channel and write file data to it.

1.3. The second shared memory must be used between processes p2 and p3. In particular, the p2 process must fill the shared memory, and p3 will use this data. Both processes must have an equal chance of creating a second shared memory. It should be noted that a second shared memory must be created to store the 13 values.

2. The p2 process must read the data (string) from the FIFO Chanel and split the data into a sequence of words. Using this sequence, the second shared memory must be initialized. In particular, it is necessary to count the number of words of the same length and use these values ​ ​ to initialize the shared memory (for example, index 0 will contain information about the number of words of length 3). To do this, you need to use POSIX threads (each thread must count the number of words with a fixed length. For example, one thread should read words of length 5, etc.).

3. The third process must read the second shared memory and search for the maximum value and display the corresponding information (for example, words of length 10 were repeated 300 times). If words of different length have been repeated the same maximum number of times, it is necessary to display information about each length.

Note.